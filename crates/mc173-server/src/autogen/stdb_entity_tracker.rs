// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused_imports)]
use super::stdb_entity_tracker_update_type::StdbEntityTrackerUpdateType;
use super::stdb_i_16_vec_3::StdbI16Vec3;
use super::stdb_i_32_vec_3::StdbI32Vec3;
use super::stdb_i_8_vec_2::StdbI8Vec2;
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address,
};

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct StdbEntityTracker {
    pub entity_id: u32,
    pub distance: u16,
    pub interval: u16,
    pub time: u16,
    pub absolute_countdown_time: u16,
    pub vel_enable: bool,
    pub pos: StdbI32Vec3,
    pub vel: StdbI16Vec3,
    pub look: StdbI8Vec2,
    pub sent_pos: StdbI32Vec3,
    pub sent_vel: StdbI16Vec3,
    pub sent_look: StdbI8Vec2,
    pub last_update_type: StdbEntityTrackerUpdateType,
    pub was_velocity_update: bool,
}

impl TableType for StdbEntityTracker {
    const TABLE_NAME: &'static str = "StdbEntityTracker";
    type ReducerEvent = super::ReducerEvent;
}

impl TableWithPrimaryKey for StdbEntityTracker {
    type PrimaryKey = u32;
    fn primary_key(&self) -> &Self::PrimaryKey {
        &self.entity_id
    }
}

impl StdbEntityTracker {
    #[allow(unused)]
    pub fn filter_by_entity_id(entity_id: u32) -> TableIter<Self> {
        Self::filter(|row| row.entity_id == entity_id)
    }
    #[allow(unused)]
    pub fn find_by_entity_id(entity_id: u32) -> Option<Self> {
        Self::find(|row| row.entity_id == entity_id)
    }
    #[allow(unused)]
    pub fn filter_by_distance(distance: u16) -> TableIter<Self> {
        Self::filter(|row| row.distance == distance)
    }
    #[allow(unused)]
    pub fn filter_by_interval(interval: u16) -> TableIter<Self> {
        Self::filter(|row| row.interval == interval)
    }
    #[allow(unused)]
    pub fn filter_by_time(time: u16) -> TableIter<Self> {
        Self::filter(|row| row.time == time)
    }
    #[allow(unused)]
    pub fn filter_by_absolute_countdown_time(absolute_countdown_time: u16) -> TableIter<Self> {
        Self::filter(|row| row.absolute_countdown_time == absolute_countdown_time)
    }
    #[allow(unused)]
    pub fn filter_by_vel_enable(vel_enable: bool) -> TableIter<Self> {
        Self::filter(|row| row.vel_enable == vel_enable)
    }
    #[allow(unused)]
    pub fn filter_by_was_velocity_update(was_velocity_update: bool) -> TableIter<Self> {
        Self::filter(|row| row.was_velocity_update == was_velocity_update)
    }
}
