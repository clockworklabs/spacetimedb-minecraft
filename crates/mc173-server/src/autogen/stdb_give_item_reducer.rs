// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN RUST INSTEAD.

#![allow(unused_imports)]
use spacetimedb_sdk::{
    anyhow::{anyhow, Result},
    identity::Identity,
    reducer::{Reducer, ReducerCallbackId, Status},
    sats::{de::Deserialize, ser::Serialize},
    spacetimedb_lib,
    table::{TableIter, TableType, TableWithPrimaryKey},
    Address,
};

#[derive(Serialize, Deserialize, Clone, PartialEq, Debug)]
pub struct StdbGiveItemArgs {
    pub player_id: u32,
    pub id: u16,
    pub damage: u16,
    pub size: u16,
}

impl Reducer for StdbGiveItemArgs {
    const REDUCER_NAME: &'static str = "stdb_give_item";
}

#[allow(unused)]
pub fn stdb_give_item(player_id: u32, id: u16, damage: u16, size: u16) {
    StdbGiveItemArgs {
        player_id,
        id,
        damage,
        size,
    }
    .invoke();
}

#[allow(unused)]
pub fn on_stdb_give_item(
    mut __callback: impl FnMut(&Identity, Option<Address>, &Status, &u32, &u16, &u16, &u16)
        + Send
        + 'static,
) -> ReducerCallbackId<StdbGiveItemArgs> {
    StdbGiveItemArgs::on_reducer(move |__identity, __addr, __status, __args| {
        let StdbGiveItemArgs {
            player_id,
            id,
            damage,
            size,
        } = __args;
        __callback(__identity, __addr, __status, player_id, id, damage, size);
    })
}

#[allow(unused)]
pub fn once_on_stdb_give_item(
    __callback: impl FnOnce(&Identity, Option<Address>, &Status, &u32, &u16, &u16, &u16)
        + Send
        + 'static,
) -> ReducerCallbackId<StdbGiveItemArgs> {
    StdbGiveItemArgs::once_on_reducer(move |__identity, __addr, __status, __args| {
        let StdbGiveItemArgs {
            player_id,
            id,
            damage,
            size,
        } = __args;
        __callback(__identity, __addr, __status, player_id, id, damage, size);
    })
}

#[allow(unused)]
pub fn remove_on_stdb_give_item(id: ReducerCallbackId<StdbGiveItemArgs>) {
    StdbGiveItemArgs::remove_on_reducer(id);
}
